§ ==========================================================
§  Comments
§
§  various templates are used by the plug-in, their names
§  should not be changed, but they can be edited to
§  customize the inserted code:
§  - the template "Comments.end-of-line-comment" is used by
§    the menu entry Perl -> Comments -> end-of-line comment,
§    it does not generate a menu entry
§  - the template "Comments.file description pl" is used as
§    a file header for files names "*.pl".
§  - the template "Comments.file description pm" is used as
§    a file header for files names "*.pm".
§  - the template "Comments.file description t" is used as
§    a file header for files names "*.t".
§  automatic insertion of the file headers can be prevented
§  by setting the configuration variable in your ".vimrc":
§    let g:Perl_InsertFileHeader = 'no'
§ ==========================================================

== Comments.end-of-line-comment == append, nomenu ==
# <CURSOR>
== Comments.frame == map:cfr, sc:f  ==
#-------------------------------------------------------------------------------
#  <CURSOR>
#-------------------------------------------------------------------------------
== Comments.function == map:cfu, sc:f  ==
#===  FUNCTION  ================================================================
#{{{1     NAME: |?FUNCTION_NAME|<CURSOR>
#      PURPOSE: 
#   PARAMETERS: ????
#      RETURNS: ????
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
== Comments.method == map:cme, sc:m  ==
#===  CLASS METHOD  ============================================================
#{{{1    CLASS: |?CLASSNAME|
#       METHOD: |?METHODNAME|
#   PARAMETERS: ????
#      RETURNS: ????
#  DESCRIPTION: <CURSOR>
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
== Comments.file description pl == map:chpl, sc:d, start, noindent ==
#!|PERL_INTERPRETER|
#===============================================================================
#
#         FILE: |FILENAME|
#
#        USAGE: ./|FILENAME|  
#
#  DESCRIPTION: <CURSOR>
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use utf8;
use FindBin qw{$Script };
#use FindBin qw{$Bin $Script $RealBin $RealScript $Dir $RealDir};

my $VERSION        = '';

my $DOCUMENTATION = <<EOMESSAGE;
Please describe what this program does

Usage : $Script [-he [-w Z] [-d X] [-f N] 

    Options     : Descriptions
    --------      ------------------------------------------------------
    -h          : Help menu
    -e          : Enable something
    -d  drive   : Option with agrument
    -w  win     : Option with agrument
    --help      : Help Menu
    --version   : Version 

EOMESSAGE

use Getopt::Std;
use POSIX ":sys_wait_h";
use English '-no_match_vars';
    # see perlvar for variable names and features
    # no_match to reduce regx effiecency loss


#use File::stat;
#use File::Copy;
use Config;
use Data::Dumper;


#use Readonly;
#Readonly my $PI => 3.14;

# ------------------------------------------------------------------------------
# BEGIN
# ------------------------------------------------------------------------------
#BEGIN {
#}

# ------------------------------------------------------------------------------
# INIT
# ------------------------------------------------------------------------------
#INIT {
#}

# ------------------------------------------------------------------------------
# END
# ------------------------------------------------------------------------------
#END {
#}

# ------------------------------------------------------------------------------
# CHECK
# ------------------------------------------------------------------------------
#CHECK {
#}

# ------------------------------------------------------------------------------
# declare sub  <+SUB+>
# ------------------------------------------------------------------------------
sub passing_argu_3orless;
sub passing_argu_4ormore;
sub HELP_MESSAGE();
sub VERSION_MESSAGE();

# ------------------------------------------------------------------------------
# global variables
# ------------------------------------------------------------------------------

my $OS;
my %cmdLineOption;
getopts( "hd:f:", \%cmdLineOption );
    #	<+INPUTOPTIONS+>

 # examples of direct associating
my @ARRAY = qw(0  2 3 4 5 6 7 8 9   17 19 20 21 23 25);
my %HASH  = ( somevalue => 'as', );

my $ref_ARRAY = [ qw(0  2 3 4 5 6 7 8 9   17 19 20 21 23 25)] ;
my $ref_HASH  = { somevalue => 'as', another => "value", };
# ------------------------------------------------------------------------------
# Database of values;
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# parse command line and setup defaults
# ------------------------------------------------------------------------------
if ( $Config{'osname'} =~ /Win/ ) {
    $OS = "Windows";
}

local $Data::Dumper::Sortkeys = 1;
local $Data::Dumper::Purity   = 1;  ##new to verify this

#print Data::Dumper->Dump( [ \%Config ], [qw(Config  )] );

if ( defined $cmdLineOption{h} ) {
    HELP_MESSAGE();
    exit(15);
}

#if ( defined $cmdLineOption{d} )  {
# something =   $cmdLineOption{d} ;
#	<+INPUTOPTIONS+>
#}

#if ( defined $cmdLineOption{f} )  {
# something =   $cmdLineOption{f} ;
#	<+INPUTOPTIONS+>
#}

# ------------------------------------------------------------------------------
#  MAIN part of program
# ------------------------------------------------------------------------------

#<+MAIN+>
my $time = localtime();
print "$time\n";

passing_argu_3orless( 1, 2, 3 );
my $runFunction = \&passing_argu_3orless;

&{ $runFunction }(4, 5, 6);
# or [\&passing_argu_3orless, 4, 5, 6 ]   # when passing a agru to another function like Tk's -command =>  


passing_argu_4ormore( { text => "test", cols => 20, centered => 1, } );

my $sc = returnScalar();
my $ar = returnArray();
my $ha = returnHash();

my $b = 0;
my $a = ref( \$b);

print "Return Scalar ". $a ." \n";
print "Return Array ". ref( $ar ) ." \n";
print "Return Hash ". ref( $ha ) ." \n";
print "Return Hash ". scalar( $ha ) ." \n";


#print Data::Dumper->Dump( [ \$time, \@ARRAY, \%cmdLineOption, \%HASH ], [qw(time   ARRAY    cmd_line_option    HASH )] );

exit 0;

# ------------------------------------------------------------------------------
# Define subroutines
#     <+SUB+>
# ------------------------------------------------------------------------------

sub passing_argu_3orless {

    # unpack input arguments
    my ( $first, $second, $third ) = @_;

    print "passing_argu_3orless()\n";
    print "First arg is $first, then $second, and $third\n";
}

sub passing_argu_4ormore() {

    # when passing in several input arguments, use a hash
    my ($in_argu_ref) = @_;

    print "passing_argu_4ormore()\n";
    if ( !defined $in_argu_ref->{junk} ) {
        # set an agrument to default value if not defined. 
        $in_argu_ref->{junk} = "JUNK";
    }

    foreach my $key (keys %$in_argu_ref) {
        print "$key -> $in_argu_ref->{$key}, ";
    }
    print "\n";

    #print " $in_argu_ref->{cols};\n";
    #print " $in_argu_ref->{centered};\n";
} # end of passing_argu_4ormore


sub returnScalar {
    my $a = 0;
    return \$a;
}

sub returnArray {
    my @a = qw/ 1 2 3/; 
    return \@a;
}

sub returnHash {
    my %a = ( 'a' => 'asdf');

    return \%a;
}

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
sub HELP_MESSAGE() {

    print <<EOTEXT;
-----------------------------------------------------------------------------
$Script - TITLE
$DOCUMENTATION

$^X
EOTEXT
    exit(1);
}

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
sub VERSION_MESSAGE() {
    $Getopt::Std::STANDARD_HELP_VERSION = 1;

    # The above prevents this function from running exit();
    # but it causes a false warning, therefore I print it.
    print "$Script :  $VERSION $Getopt::Std::STANDARD_HELP_VERSION \n";
}


##################################################################
#                                                                #
#                                                                #
#                                                                #
##################################################################

# }}}1
# vim:tabstop=4:si:expandtab:shiftwidth=4:shiftround:set foldenable foldmethod=marker:

== Comments.file description pm == map:chpm, sc:d, start, noindent ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#        FILES: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
 
package |FILENAME|

use Moose;
use Moose::Util::TypeConstraints;
#use Data::Dumper;
#local $Data::Dumper::Sortkeys = 1;
#local $Data::Dumper::Purity   = 1;  ##new to verify this

use parent 'myParentOOP';

has 'name'       => ( is => 'ro', isa => "Str" );


1;
##################################################################
#
#
#
##################################################################

# }}}1
# vim:tabstop=4:si:expandtab:shiftwidth=4:shiftround:set foldenable foldmethod=marker:

== Comments.file description t == map:cht, sc:d, start, noindent ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#        FILES: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: |AUTHOR| (|AUTHORREF|), |EMAIL|
# ORGANIZATION: |ORGANIZATION|
#      VERSION: 1.0
#      CREATED: |DATE| |TIME|
#     REVISION: ---
#===============================================================================

use strict;
use warnings;

use Test::More ;  # tests => 1;                      # last test to print
#use Data::Dumper;
#local $Data::Dumper::Sortkeys = 1;
#local $Data::Dumper::Purity   = 1;  ##new to verify this



use_ok( "|FILENAME|");

is($a, $expect, "description");



done_testing();
##################################################################
#
#
#
##################################################################

# }}}1
# vim:tabstop=4:si:expandtab:shiftwidth=4:shiftround:set foldenable foldmethod=marker:

== Comments.file description pod == map:chpo, sc:d, start ==
#
#===============================================================================
#
#         FILE: |FILENAME|
#
#  DESCRIPTION: <CURSOR>
#
#       AUTHOR: |AUTHOR| (|AUTHORREF|), <|EMAIL|>
# ORGANIZATION: |ORGANIZATION|
#      CREATED: |DATE|
#     REVISION: ---
#===============================================================================


== Comments.date == insert, map:cd, sc:d ==
|DATE|<CURSOR>
== Comments.date+time == insert, map:ct, sc:t ==
|DATE| |TIME|<CURSOR>
== ENDTEMPLATE ==

== LIST: comments_keywords == hash ==
  'BUG'         : ':BUG:|DATE| |TIME|:|AUTHORREF|:',
  'REMARK'      : ':REMARK:|DATE| |TIME|:|AUTHORREF|:',
  'TODO'        : ':TODO:|DATE| |TIME|:|AUTHORREF|:',
  'WARNING'     : ':WARNING:|DATE| |TIME|:|AUTHORREF|:',
  'WORKAROUND'  : ':WORKAROUND:|DATE| |TIME|:|AUTHORREF|:',
  'new keyword' : ':{+NEW_KEYWORD+}:|DATE| |TIME|:|AUTHORREF|:',
== LIST: comments_macros == hash ==
  'AUTHOR'       : '|AUTHOR|',
  'AUTHORREF'    : '|AUTHORREF|',
  'COMPANY'      : '|COMPANY|',
  'COPYRIGHT'    : '|COPYRIGHT|',
  'EMAIL'        : '|EMAIL|',
  'ORGANIZATION' : '|ORGANIZATION|',
== ENDLIST ==

== Comments.keyword comments == expandmenu, append, map:ck, sc:k ==
|PickList( 'keyword comment', 'comments_keywords' )|
 # |PICK| <CURSOR>
== Comments.macros == expandmenu, insert, map:cma, sc:m ==
|PickList( 'macro', 'comments_macros' )|
|PICK|<CURSOR>
== ENDTEMPLATE ==
